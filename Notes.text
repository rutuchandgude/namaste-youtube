Youtube Project - 

 - Features
 - Tech stack
 - Redux
 - Tailwind
 - react-Redux
 - bundler
 - jest, 

 
 -header - hamberguer menu - sidebar
   - logo, searchbar , login icon , buttons or vdos
     - Header,vdo, suggestions, comments, subscribe and like button 

- Components 
 - Heading , Sidebar , Body - Button List,
     - vdo component, vdo card , head 

> npx create-react-app namaste-youtube

> npm i -D tailwindcss
> npx tailwindcss init 
 - will initiate with config.js

- In tailwind.config.js :
  content: [
    "./src/**/*.js"
  ]

- In App.css :
@tailwind base;
@tailwind components;
@tailwind utilities;

 /*
      * Head
      * Body
      * Sidebar
      *   MenuItems
      * MainContainer
      *   ButtonsList
      *   VideoContainer
      *     VideoCard
      * 
  */

components - 
  - Head.js 
  - Body.js
  - Sidebar.js
  - MainContainer.js
  - ButtonsList.js
  - VideoContainer.js

Redux setup :
 >npm i @reduxjs/toolkit
 >npm i react-redux

- Youtube API :
 Youtube -> Data API -> Reference -> Videos -> list 
  -> list(most popular Videos) ->APIs Explorer

("https://youtube.googleapis.com/youtube/v3/videos?key=[YOUR_API_KEY]")

- youtube API key Auth :
 - To make our credentials - create your own API key
 - credential Page -> create credentials -> create API key 
  (AIzaSyBibzAK3Qc1BG6IXxanIQF8-JijwP8b8fc)
  - Enable Youtube Data API v3
  -APIs Explorer- At right side extract the window their in HTTP will get an API

  - VideoContainer.js
  -VideoCard.js

- &maxResults=50 -> this added in API to get 50   vdos 
-&regionCode=IN -> Added in API to get Indian vdos

- Build Watch Page :
 - Routing:
  > npm i react-router-dom

  //-----------
   - created watchpage
   - watchPage.js 
    For closing Sidebar when we open Watchpage , useDispatch .
    - To load webpage we have used iframe embed code.
    
 //-------Advance Features in Youtube--------------
    - Higher Order Components :
      - A higher-order component(HOC) is an advanced technique in React for reusing component logic.

     - A higher-order component is a function that takes a component and returns a new component.

       const EnhancedComponent = higherOrderComponent(WrappedComponent);

 - Debouncing :
  - If we are typing very fast the difference between the key stroke will be very low .
    If typing slow .. vice versa
    - when we are typing fast we dont need suggestions

    typing slow = 200ms
    typing fast = 30ms

    Performance:
     - iphone pro max = 14 letters *1000 people = 14000 API calls
     - with debouncing = 3 API calls * 1000 people = 3000 API calls
    

     Debouncing wigh 200ms :
     - If difference between 2 key stroke is <200ms - DECLINE API calls
     - If its >200 make an API call (user might need suggestions)

     - Youtube API search autocomplete :
     - API from stackoverflow
      API : http://suggestqueries.google.com/complete/search?client=firefox&ds=yt&q=Query

     //make an API call after every key press
    //but if the difference between 2 API calls is <200.s
    //decline the API call
    

      /**
   * Debouncing - 1:34:33
   * key - i
   * - render the component
   * - useEffect(); 
   * - start time => make api call after 200 ms
   * 
   * key - ip
   * - destroy the component (useEffect return method)
   * - re-render the component
   * - useEffect()
   * - start timer => make api call after 200 ms
   * 
   * 
   * 
   * setTimeout(200) - decline or clear 
   * setTimeout(200) - make an API call
   */

 <li className="py-2 shadow-sm hover:bg-gray-100">üîçIphone pro</li>

Cache :
 time complexity to search in array = 0(n)
 time complexity to search in Object = 0(1)
 - 0(1) is more better than 0(n)

[i, ip, iph, iphone]

{
  i:
  ip:
  iph:
  iphone:
}

- LRU cache - Least Recently used catche